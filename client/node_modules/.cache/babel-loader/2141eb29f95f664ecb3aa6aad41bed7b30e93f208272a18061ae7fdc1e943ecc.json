{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mskirboga\\\\kelimeOgrenme\\\\client\\\\src\\\\components\\\\Settings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Settings.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Settings = () => {\n  _s();\n  const [dailyWordCount, setDailyWordCount] = useState(10); // Varsayılan değeri 10 olarak ayarlayın\n\n  useEffect(() => {\n    const fetchSettings = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const res = await axios.get('http://localhost:5000/api/settings', {\n          headers: {\n            'x-auth-token': token\n          }\n        });\n        setDailyWordCount(res.data.daily_word_count);\n      } catch (err) {\n        console.error('Fetch settings error:', err);\n      }\n    };\n    fetchSettings();\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('http://localhost:5000/api/settings', {\n        daily_word_count: dailyWordCount\n      }, {\n        headers: {\n          'x-auth-token': token\n        }\n      });\n      alert('Settings updated successfully!');\n    } catch (err) {\n      console.error('Update settings error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"settings-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dailyWordCount\",\n          children: \"Daily Word Count:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"dailyWordCount\",\n          value: dailyWordCount || '' // undefined olmasını engellemek için boş string kullanın\n          ,\n          onChange: e => setDailyWordCount(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Settings, \"MvfGNmp+BuZC+xYuGbAn+L2Mt5Q=\");\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Settings","_s","dailyWordCount","setDailyWordCount","fetchSettings","token","localStorage","getItem","res","get","headers","data","daily_word_count","err","console","error","handleSubmit","e","preventDefault","post","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/mskirboga/kelimeOgrenme/client/src/components/Settings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Settings.css';\r\n\r\nconst Settings = () => {\r\n    const [dailyWordCount, setDailyWordCount] = useState(10); // Varsayılan değeri 10 olarak ayarlayın\r\n\r\n    useEffect(() => {\r\n        const fetchSettings = async () => {\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                const res = await axios.get('http://localhost:5000/api/settings', {\r\n                    headers: {\r\n                        'x-auth-token': token\r\n                    }\r\n                });\r\n                setDailyWordCount(res.data.daily_word_count);\r\n            } catch (err) {\r\n                console.error('Fetch settings error:', err);\r\n            }\r\n        };\r\n\r\n        fetchSettings();\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            await axios.post('http://localhost:5000/api/settings', { daily_word_count: dailyWordCount }, {\r\n                headers: {\r\n                    'x-auth-token': token\r\n                }\r\n            });\r\n            alert('Settings updated successfully!');\r\n        } catch (err) {\r\n            console.error('Update settings error:', err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"settings-container\">\r\n            <h2>Settings</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"dailyWordCount\">Daily Word Count:</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        id=\"dailyWordCount\"\r\n                        value={dailyWordCount || ''} // undefined olmasını engellemek için boş string kullanın\r\n                        onChange={(e) => setDailyWordCount(e.target.value)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Save</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}